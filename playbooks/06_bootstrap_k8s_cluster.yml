---
- name: Install kubelet and kubeadm
  hosts: k8s_masters
  remote_user: root
  gather_facts: false
  vars:
    etcd_node1_inventory_hostname: etcd-1
    local_data_path: ../data
    local_k8s_dir_path: ../kubernetes
    k8s_master1_inventory_hostname: k8s-master-1
    k8s_apiserver_vip: k8s-lb-vip

  tasks:
    - name: Make sure iptables is allowed to check bridge traffic (1/2)
      ansible.builtin.blockinfile:
        path: /etc/sysctl.d/k8s.conf
        create: true
        block: |
          net.bridge.bridge-nf-call-ip6tables = 1
          net.bridge.bridge-nf-call-iptables = 1
        mode: "0644"

    - name: Make sure iptables is allowed to check bridge traffic (2/2)
      ansible.builtin.command: "sysctl --system"
      register: result
      changed_when: result.rc != 0

    - name: Add Kubernetes repo
      ansible.builtin.yum_repository:
        name: kubernetes
        description: Kubernetes - $basearch
        baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-$basearch
        enabled: true
        gpgcheck: true
        gpgcakey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
        exclude:
          - kubelet
          - kubeadm
        file: kubernetes
        state: present

    - name: Add rpm key
      ansible.builtin.rpm_key:
        key: "{{ item.key_url }}"
        state: present
      loop:
        - { key_url: https://packages.cloud.google.com/yum/doc/yum-key.gpg }
        - { key_url: https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg }

    - name: Install kubelet, kubeadm and also add ipvsadm here for enabling ipvs mode for kube-proxy
      ansible.builtin.yum:
        name:
          - kubelet
          - kubeadm
          - ipvsadm
        disable_excludes: kubernetes
        state: present

    - name: Add ipvs module when next os startup
      ansible.builtin.copy:
        dest: /etc/sysconfig/modules/ipvs.modules
        content: |
          #!/bin/bash
          modprobe -- ip_vs
          modprobe -- ip_vs_rr
        mode: "0755"

    - name: Load ipvs module immediately
      ansible.builtin.command: /etc/sysconfig/modules/ipvs.modules
      register: result
      changed_when: result.rc != 0

    - name: Start and enabled auto-start kubelet
      ansible.builtin.systemd:
        name: kubelet.service
        daemon_reload: true
        enabled: true
        state: started

    - name: Create /etc/kubernetes/pki/etcd/ on k8s masters if it does not exist
      ansible.builtin.file:
        path: /etc/kubernetes/pki/etcd/
        state: directory
        mode: "0755"

    # apiserver-etcd-client crt and key was fetched at playbook 03_bootstrap_etcd.yml before
    - name: Upload CA cert of Etcd to k8s masters
      ansible.builtin.copy:
        src: "{{ local_data_path }}/{{ etcd_node1_inventory_hostname }}_ca/{{ item.src_filename }}"
        dest: "{{ item.dest_file_path }}"
        mode: "0644"
      loop:
        - { src_filename: ca.crt, dest_file_path: /etc/kubernetes/pki/etcd/ca.crt }
        - { src_filename: ca.key, dest_file_path: /etc/kubernetes/pki/etcd/ca.key }
        - { src_filename: apiserver-etcd-client.crt, dest_file_path: /etc/kubernetes/pki/apiserver-etcd-client.crt }
        - { src_filename: apiserver-etcd-client.key, dest_file_path: /etc/kubernetes/pki/apiserver-etcd-client.key }

    - name: Upload config file for kubeadm init to k8s master1
      ansible.builtin.copy:
        src: "{{ local_k8s_dir_path }}/kubeadm-config.yaml"
        dest: /etc/kubernetes/kubeadm-config.yaml
        mode: "0644"
      when: inventory_hostname == k8s_master1_inventory_hostname

    # - name: kubeadm init on k8s master1
    #   command:
    #     argv:
    #       - kubeadm
    #       - init
    #       - --config=/etc/kubernetes/kubeadm-config.yaml
    #       - --upload-certs
    #     creates: /etc/kubernetes/admin.conf
    #   when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Execute kubeadm init on k8s master1
      ansible.builtin.command:
        argv:
          - kubeadm
          - init
          - --config=/etc/kubernetes/kubeadm-config.yaml
        creates: /etc/kubernetes/admin.conf
      when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Fetch kubeconfig file from k8s master1
      ansible.builtin.fetch:
        src: /etc/kubernetes/admin.conf
        dest: "{{ local_data_path }}/{{ inventory_hostname }}-kubeconfig/config"
        flat: true
      when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Get kubeadm join token on k8s master1
      ansible.builtin.shell: |
        set -o pipefail # <-- adding this will prevent surprises
        if kubeadm token list | grep authentication >/dev/null; then
          kubeadm token list | grep authentication | cut -d ' ' -f 1
        else
          kubeadm token create
        fi
      args:
        executable: bash
      register: join_token
      changed_when: join_token.rc != 0
      when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Get kubeadm join token ca cert hash on k8s master1
      ansible.builtin.shell: |
        set -o pipefail # <-- adding this will prevent surprises
        openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
      register: join_token_ca_cert_hash
      changed_when: join_token_ca_cert_hash.rc != 0
      when: inventory_hostname == k8s_master1_inventory_hostname

    # - name: get kubeadm join token certificate-key on k8s master1
    #   shell: kubeadm certs certificate-key
    #   register: join_certificate_key
    #   when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Fetch certs from k8s master1
      ansible.builtin.fetch:
        src: "/etc/kubernetes/pki/{{ item.src_filepath }}"
        dest: "{{ local_data_path }}/{{ inventory_hostname }}-pki/{{ item.dest_file_path }}"
        flat: true
      loop:
        - { src_filepath: ca.crt, dest_file_path: ca.crt }
        - { src_filepath: ca.key, dest_file_path: ca.key }
        - { src_filepath: sa.key, dest_file_path: sa.key }
        - { src_filepath: sa.pub, dest_file_path: sa.pub }
        - { src_filepath: front-proxy-ca.crt, dest_file_path: front-proxy-ca.crt }
        - { src_filepath: front-proxy-ca.key, dest_file_path: front-proxy-ca.key }
        - { src_filepath: etcd/ca.crt, dest_file_path: etcd/ca.crt }
        - { src_filepath: etcd/ca.key, dest_file_path: etcd/ca.key }
      when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Upload certs to other k8s masters
      ansible.builtin.copy:
        src: "{{ local_data_path }}/{{ k8s_master1_inventory_hostname }}-pki/{{ item.src_filepath }}"
        dest: "/etc/kubernetes/pki/{{ item.dest_file_path }}"
        mode: preserve
      loop:
        - { src_filepath: ca.crt, dest_file_path: ca.crt }
        - { src_filepath: ca.key, dest_file_path: ca.key }
        - { src_filepath: sa.key, dest_file_path: sa.key }
        - { src_filepath: sa.pub, dest_file_path: sa.pub }
        - { src_filepath: front-proxy-ca.crt, dest_file_path: front-proxy-ca.crt }
        - { src_filepath: front-proxy-ca.key, dest_file_path: front-proxy-ca.key }
        - { src_filepath: etcd/ca.crt, dest_file_path: etcd/ca.crt }
        - { src_filepath: etcd/ca.key, dest_file_path: etcd/ca.key }
      when: inventory_hostname != k8s_master1_inventory_hostname

    # - name: Generate kubeadm join as control panel script on k8s master1
    #   copy:
    #     dest: /root/kubeadm_join.sh
    #     content: |
    #       #!/bin/bash
    #       kubeadm join {{ k8s_apiserver_vip }}:6443 \
    #       --token={{ join_token.stdout }} \
    #       --discovery-token-ca-cert-hash=sha256:{{ join_token_ca_cert_hash.stdout }} \
    #       --control-plane \
    #       --certificate-key={{ join_certificate_key.stdout }}
    #   when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Generate kubeadm join as control panel script on k8s master1
      ansible.builtin.copy:
        dest: /root/kubeadm_join_control.sh
        content: |
          #!/bin/bash
          kubeadm join {{ k8s_apiserver_vip }}:6443 \
          --token={{ join_token.stdout }} \
          --discovery-token-ca-cert-hash=sha256:{{ join_token_ca_cert_hash.stdout }} \
          --control-plane
        mode: preserve
      when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Fetch kubeadm join as control panel script from k8s master1
      ansible.builtin.fetch:
        src: /root/kubeadm_join_control.sh
        dest: "{{ local_data_path }}/{{ inventory_hostname }}-kubeadm_join/kubeadm_join_control.sh"
        flat: true
      when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Generate kubeadm join as worker script on k8s master1
      ansible.builtin.copy:
        dest: /root/kubeadm_join_worker.sh
        content: |
          #!/bin/bash
          kubeadm join {{ k8s_apiserver_vip }}:6443 \
          --token={{ join_token.stdout }} \
          --discovery-token-ca-cert-hash=sha256:{{ join_token_ca_cert_hash.stdout }}
        mode: preserve
      when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Fetch kubeadm join as worker script from k8s master1
      ansible.builtin.fetch:
        src: /root/kubeadm_join_worker.sh
        dest: "{{ local_data_path }}/{{ inventory_hostname }}-kubeadm_join/kubeadm_join_worker.sh"
        flat: true
      when: inventory_hostname == k8s_master1_inventory_hostname

    - name: Run kubeadm join script
      ansible.builtin.script:
        cmd: "{{ local_data_path }}/{{ k8s_master1_inventory_hostname }}-kubeadm_join/kubeadm_join_control.sh"
        executable: bash
        creates: /etc/kubernetes/admin.conf
      when: inventory_hostname != k8s_master1_inventory_hostname

    - name: Setup kubectl on k8s masters
      ansible.builtin.script:
        cmd: "{{ local_k8s_dir_path }}/setup_kubectl.sh"
        creates: /root/.kube/config

    - name: Fix kubectl get cs issue
      ansible.builtin.replace:
        path: "{{ item.file_name }}"
        regexp: '- --port=0'
        replace: "# - --port=0"
      loop:
        - { file_name: /etc/kubernetes/manifests/kube-scheduler.yaml }
        - { file_name: /etc/kubernetes/manifests/kube-controller-manager.yaml }

    - name: Restart kubelet
      ansible.builtin.systemd:
        state: restarted
        name: kubelet.service
